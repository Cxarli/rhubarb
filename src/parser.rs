/**!
 * The parser is the second step of a compiler. It takes the list
 * of tokens as generated by the lexer, and converts it into an
 * Abstract Syntax Tree (AST). This tree gives the general structure
 * of the input program.
 */
use crate::{asts::expr::Ast, Error, Token};

/**
 *  Parse the token list into an AST
 */
pub fn parse(_tokens: Vec<Token>) -> Result<Ast, Error> {
    unimplemented!();
}
